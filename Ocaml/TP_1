(* This is an OCaml editor.
   Enter your program here and send it to the toplevel using the "Eval code"
   button. *)
(* Question 1*)

type bit = bool 
type duet = bool*bool
type quartet = bool*bool*bool*bool


(* Question 2*)

let xor (a:bit)(b:bit): bit = (not a && b ) || (a && not b);;  

xor  true false;;

(*Question 3*)

let half_adder(a:bit)(b:bit):duet =( (xor a b ), (a&&b) ) ;;
half_adder true true;;

(*Question 4*) 

let adder(a:bit)(b:bit)(c:bit):duet = let (s1, r1)= half_adder a b in 
  let (s2, r2) = half_adder c s1 in  
  (s2, r1||r2);;
adder true false true;;

(*Question 5*)
let _= assert(( adder true true true)=(true, true))

(*Question 6*)

let duet_adder((a, b) : duet)((c,d):duet)(e:bit):(duet*bit) =
  let (s1,r1)=  adder b d e in  
  let (s2, r2)= adder  a c r1 in
  ((s1, s2), r2);; 

let _ =assert((duet_adder (true ,true) (true ,false) true)  =((false,true), true) )
  

(* Question 7 *) 
let quartet_adder ((a, b, c,d): quartet) ((e,f,g,h):quartet) (k:bit):
  (quartet*bit) = 
  let ((s1, s2), r1)= (duet_adder (c,d) (g,h) k ) in 
  let ((s3, s4), r2) = (duet_adder (a,b) (e,f) r1) in 
  ((s4, s3, s2, s1) , r2) ;; 
(*   1010  
     1001   
        1 
_________________
=  10100    
      s1=0, s2=0, s3=1,  s4=0   r2=1*)
   
let _ =assert(
  (quartet_adder (true ,false, true, false) 
     (true ,false, false, true) true) =
  ((false,true, false, false), true))
  
  
 (* Question   8 *)
